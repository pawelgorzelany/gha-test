name: Test

on:
  workflow_dispatch:

jobs:
  pre-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ github.ref }}
      - if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/prodfixes' }}
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            core.setFailed("Can't deploy to production from branch other than master or prodfixes!")
      - id: create-maintanance-branch
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: peterjgrainger/action-create-branch@v2.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: prodfixes
      - if: ${{ github.ref == 'refs/heads/main' && steps.create-maintanance-branch.outputs.created == 'false' }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed("Can't deploy from main while there is an active maintance branch!")

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - pre-deploy
    steps:
      - run: echo "deploying..."

  post-deploy:
    needs:
      - deploy
    name: 'Tag prod release'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout with tags'
        uses: actions/checkout@v4
        with:
          fetch-tags: true
      - name: 'Tag current production release'
        uses: endaft/action-dev-tagger@v1.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prefix: production
          tag: production
      - name: 'Get latest semantic version'
        id: get-latest-version
        run: echo "version=$(git tag -l --sort=version:refname 'v*' | head | grep . || echo 'v1.0.0' | sed 's/v//')" >> $GITHUB_OUTPUT
      - name: 'Calculate next semantic version'
        id: calculate-next-version
        uses: christian-draeger/increment-semantic-version@1.1.0
        with:
          current-version: ${{ steps.get-latest-version.outputs.version }}
          version-fragment: ${{ github.ref == 'refs/heads/master' && 'feature' || 'bug' }}
      - run: echo "v${{ steps.calculate-next-version.outputs.next-version }}"
